PySPEAD

This is a fast and light Python implementation of the Streaming Protocol for the Exchange of Astronomical Data

ToDo:
    - Unpacking is now pretty quick, but for arrays, we could get one more speed-up by unpacking data directly into
      a numpy array, rather than to a tuple. 

    - Right now, packets are pulled straight from the socket and put into a packet ringbuffer.  The packet
      ringbuffer then feeds a callback that consumes the packets and creates a frame.  While frame creation from
      packets is performed in C, a Python callback is currently used to hand the packets to SpeadFrame.
      (a) We should make frame assembly happen automatically, so that the Python callback is fed frames directly.
      (b) While implementing this, we should also incorportate packet sorting by frame_cnt so that packets can
          arrive out of order, but frames are assembled in order to the extent allowed by the available buffer.

    - Confusingly, there are currently two kinds of "frame" in spead.py: one is a SpeadFrame that is generated
      by a receiver, and one is a dictionary that is used by a transmitter.  We should move the frame => packets
      pipeline into C as well, and make all frames of the SpeadFrame type.

    - Packet sorting is done as each packet is inserted, but it could be
      done faster by buffering them and then quicksorting

    - _spead.pack() is currently the limiting factor on transmit.  Can it be sped up?
       
Known Issues: 
    - Occasionally MacOSX hangs forever in unittest test_spead.py TestTransportUDPrx.test_get_packets_term.  This
      seems to be b/c no data is being received.  Hanging seems to be more frequent when buffer_socket.cpp
      has the DEBUG flag set.  Linux doesn't seem to have the same problem.  Cause unknown.

